// +build ignore

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"text/template"
)

type blob struct {
	Name string
	Data string
}

var resourcesTemplate = template.Must(template.New("").Parse(strings.TrimLeft(`
// Code generated by go generate; DO NOT EDIT.
package static

var resources map[string]string = map[string]string{
{{- range . }}
	"{{ .Name }}": "{{ .Data }}",
{{- end }}
}
`, "\n")))

func compress(data []byte) (string, error) {
	var compressed bytes.Buffer

	writer := gzip.NewWriter(&compressed)

	if _, err := writer.Write(data); err != nil {
		return "", err
	}

	if err := writer.Flush(); err != nil {
		return "", err
	}

	if err := writer.Close(); err != nil {
		return "", err
	}

	return base64.StdEncoding.EncodeToString(compressed.Bytes()), nil
}

func gen() error {
	cwd, err := os.Getwd()

	if err != nil {
		return err
	}

	fmt.Println("Current working directory:", cwd)

	srcd := path.Join(cwd, "resources")
	fmt.Println("Source dir:", srcd)

	dstf := path.Join(cwd, "blob.go")
	fmt.Println("Destination file:", dstf)

	blobs := make([]blob, 0)

	if err := filepath.Walk(srcd, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !info.IsDir() {
			if data, err := ioutil.ReadFile(path); err != nil {
				return err
			} else {
				if compressed, err := compress(data); err != nil {
					return err
				} else {
					blobs = append(blobs, blob{
						Name: strings.TrimPrefix(path, srcd),
						Data: compressed,
					})
				}
			}
		}

		return nil
	}); err != nil {
		return err
	}

	if f, err := os.Create(dstf); err != nil {
		return err
	} else {
		defer f.Close()

		if err := resourcesTemplate.Execute(f, blobs); err != nil {
			return err
		} else {
			return nil
		}
	}
}

func main() {
	if err := gen(); err != nil {
		fmt.Fprintln(os.Stderr, "\033[31mError:\033[0m", err.Error())
		os.Exit(1)
	}
}
